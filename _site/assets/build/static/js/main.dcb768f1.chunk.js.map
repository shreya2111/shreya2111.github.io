{"version":3,"sources":["div.js","index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js"],"names":["htmltags","E","forEach","tagname","idx","is_svg","indexOf","fn_name","slice","length","$parent","attrs","textContent","$el","document","createElementNS","aname","setAttribute","appendChild","TimedTextPlayer","data","sample_id","_this","this","instance","Constructor","TypeError","_classCallCheck","div","class","$audio","audio","controls","src","concat","duration","end","t","$tick","$num","style","left","_ref","text","start","$wd","width","onclick","currentTime","window","onload","h1","body","fetch","then","x","json","ret","console","log","_ref2","ground_truth","sample","$samp","h2"],"mappings":"wJACMA,EAAW,CACf,MACA,IACA,KACA,KACA,KACA,IACA,IACA,IACA,KACA,OACA,KACA,QACA,QACA,MACA,SACA,KACA,KACA,KACA,QACA,MACA,OACA,WACA,QACA,QACA,SACA,OACA,SACA,SAEA,MACA,OACA,OACA,SACA,IACA,UACA,OACA,WACA,UACA,OAEA,SAGSC,EAAI,GACfD,EAASE,QAAQ,SAACC,EAASC,GACzB,IAAMC,EAASD,GAAOJ,EAASM,QAAQ,OAEnCC,EAAUJ,EACVA,EAAQG,QAAQ,QAAU,IAC5BH,EAAUA,EAAQK,MAAM,EAAGL,EAAQM,OAAS,IAG9CR,EAAEM,GAAW,SAACG,EAASC,EAAOC,GAC5BD,EAAQA,GAAS,GACjB,IAAIE,EAAMC,SAASC,gBACjBV,EAAS,6BAA+B,+BACxCF,GAEF,IAAK,IAAIa,KAASL,EAChBE,EAAII,aAAaD,EAAOL,EAAMK,IAQhC,OANIJ,IACFC,EAAID,YAAcA,GAEhBF,GACFA,EAAQQ,YAAYL,GAEfA,KClEX,IAEMM,EACJ,SAAAA,EAAYT,EAASU,EAAMC,GAAW,IAAAC,EAAAC,MCNzB,SAAAC,EAAAC,GACf,KAAAD,aAAAC,GACA,UAAAC,UAAA,qCDIwCC,CAAAJ,KAAAJ,GAEpCI,KAAKV,IAAMZ,EAAE2B,IAAIlB,EAAS,CAACmB,MAAO,eAGlCN,KAAKO,OAAS7B,EAAE8B,MAAMrB,EAAS,CAACsB,UAAU,EAAMC,IAAG,YAAAC,OAAcb,EAAd,UAmBnD,IADA,IAAIc,EAAWf,EAAKA,EAAKX,OAAO,GAAG2B,IAC3BC,EAAE,EAAGA,EAAEF,EAAUE,GAAG,EAAG,CAC7B,IAAIC,EAAQrC,EAAE2B,IAAIL,KAAKV,IAAK,CAACgB,MAAO,SAChCU,EAAOtC,EAAE2B,IAAIL,KAAKV,IAAK,CAACgB,MAAO,UAAWQ,EAAI,KAClDC,EAAME,MAAMC,KA9BA,IA8BmBJ,EAAI,KACnCE,EAAKC,MAAMC,KA/BC,IA+BkBJ,EAAI,KAIpCjB,EAAKlB,QAAQ,SAAAwC,GAAwB,IAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,MAAOR,EAASM,EAATN,IAEtBS,EAAM5C,EAAE2B,IAAIN,EAAKT,IAAK,CAACgB,MAAO,QAASc,GAE3CE,EAAIL,MAAMC,KAvCE,IAuCKG,EAAoB,KACrCC,EAAIL,MAAMM,MAxCE,KAwCOV,EAAIQ,GAAqB,KAE5CC,EAAIE,QAAU,WACZzB,EAAKQ,OAAOkB,YAAcJ,MAwClCK,OAAOC,OAhCP,WACEjD,EAAEkD,GAAGrC,SAASsC,KAAM,GAAI,gCAGxBC,MAAM,uBACHC,KAAK,SAACC,GAAD,OAAOA,EAAEC,SACdF,KAAK,SAACG,GACLC,QAAQC,IAAI,eAAgBF,GAI5BA,EAAIvD,QAAQ,SAAA0D,GAA4B,IAA1BC,EAA0BD,EAA1BC,aAAcC,EAAYF,EAAZE,OAGtBC,EAAQ9D,EAAE2B,IAAId,SAASsC,MAG3BnD,EAAE+D,GAAGD,EAAO,GAAID,GAChB7D,EAAE2B,IAAImC,EAAO,GAAIF,GAGjBR,MAAK,aAAAnB,OAAc4B,EAAd,eACFR,KAAK,SAACC,GAAD,OAAOA,EAAEC,SACdF,KAAK,SAAClC,GACI,IAAID,EAAgB4C,EAAO3C,EAAM0C","file":"static/js/main.dcb768f1.chunk.js","sourcesContent":["// Make some convenience methods for generating DOM Elements\nconst htmltags = [\n  \"div\",\n  \"a\",\n  \"h1\",\n  \"h2\",\n  \"h3\",\n  \"b\",\n  \"i\",\n  \"p\",\n  \"br\",\n  \"span\",\n  \"hr\",\n  \"video\",\n  \"audio\",\n  \"img\",\n  \"canvas\",\n  \"li\",\n  \"ul\",\n  \"ol\",\n  \"quote\",\n  \"pre\",\n  \"code\",\n  \"textarea\",\n  \"input\",\n  \"label\",\n  \"button\",\n  \"form\",\n  \"select\",\n  \"option\",\n  // SVG\n  \"svg\",\n  \"line\",\n  \"rect\",\n  \"circle\",\n  \"g\",\n  \"ellipse\",\n  \"path\",\n  \"polyline\",\n  \"polygon\",\n  \"text\",\n  // SVG tags that share a name with HTML tags\n  \"a_svg\" // This makes an <a> with the SVG doctype\n];\n\nexport let E = {};\nhtmltags.forEach((tagname, idx) => {\n  const is_svg = idx >= htmltags.indexOf(\"svg\");\n\n  let fn_name = tagname;\n  if (tagname.indexOf(\"_svg\") > 0) {\n    tagname = tagname.slice(0, tagname.length - 4);\n  }\n\n  E[fn_name] = ($parent, attrs, textContent) => {\n    attrs = attrs || {};\n    let $el = document.createElementNS(\n      is_svg ? \"http://www.w3.org/2000/svg\" : \"http://www.w3.org/1999/xhtml\",\n      tagname\n    );\n    for (let aname in attrs) {\n      $el.setAttribute(aname, attrs[aname]);\n    }\n    if (textContent) {\n      $el.textContent = textContent;\n    }\n    if ($parent) {\n      $parent.appendChild($el);\n    }\n    return $el;\n  };\n});\n","import './index.css';\nimport { E } from \"./div.js\";\n\nconst TIMESCALE = 200;\n\nclass TimedTextPlayer {\n  constructor($parent, data, sample_id) {\n    // Create a wrapping div that shows the passage of time\n    this.$el = E.div($parent, {class: \"timed-text\"});\n\n    // Create an audio element\n    this.$audio = E.audio($parent, {controls: true, src: `data/wav/${sample_id}.wav`})\n\n    // Next step is to connect audio playback to the timing\n    // visualization.  You can either use the `ontimeupdate` callback\n    // from this.$audio, or set up a `window.requestAnimationFrame` in\n    // the browser, which will be fired more frequently.  Then, you\n    // can check `this.$audio.currentTime` to see where the audio\n    // element is and adjust the position of a \"razor\" line (similar\n    // to how the `tick` lines are display below.\n    //\n    // this.$audio.currentTime = 3\n    //\n    // will seek the audio to three seconds in. This could be used in\n    // a click handler on `this.$el` to allow direct manipulation\n    // playback control.\n\n    // Make a tick for every second\n    // XXX: Estimate duration from the end of text\n    let duration = data[data.length-1].end;\n    for(let t=0; t<duration; t+=1) {\n      let $tick = E.div(this.$el, {class: \"tick\"});\n      let $num = E.div(this.$el, {class: \"number\"}, t + \"s\");\n      $tick.style.left = TIMESCALE * t + \"px\";\n      $num.style.left = TIMESCALE * t + \"px\";\n    }\n\n    // Loop through the data and place every word based on its time offset\n    data.forEach(({text, start, end}) => {\n\n      let $wd = E.div(this.$el, {class: \"word\"}, text);\n\n      $wd.style.left = start * TIMESCALE + \"px\";\n      $wd.style.width = (end-start) * TIMESCALE + \"px\";\n\n      $wd.onclick = () => {\n        this.$audio.currentTime = start;\n      }\n\n    });\n  }\n\n}\n\nfunction start() {\n  E.h1(document.body, {}, \"Russian Timing Visualization\");\n\n  // Fetch metadata\n  fetch(\"data/json/meta.json\")\n    .then((x) => x.json())\n    .then((ret) => {\n      console.log(\"Got metadata\", ret);\n\n      // Loop through and display ground truth\n\n      ret.forEach(({ground_truth, sample}) => {\n\n        // Create an element for timing\n        let $samp = E.div(document.body);\n\n        // Put in the sample name\n        E.h2($samp, {}, sample);\n        E.div($samp, {}, ground_truth);\n\n        // Fetch word timing data\n        fetch(`data/json/${sample}_word.json`)\n          .then((x) => x.json())\n          .then((data) => {\n            let tt = new TimedTextPlayer($samp, data, sample);\n          })\n      });\n\n    });\n\n}\n\nwindow.onload = start;\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}"],"sourceRoot":""}